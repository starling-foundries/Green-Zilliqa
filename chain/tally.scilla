scilla_version 0

import ListUtils BoolUtils


(***************************************************)
(*               Associated library                *)
(***************************************************)
library Tally
  
let one_msg =
  fun (m : Message) =>
    let e = Nil {Message} in
    Cons {Message} m e
    
let two_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
    let msgs_tmp = one_msg msg2 in
    Cons {Message} msg1 msgs_tmp

(* used for list inclusion test *)
let equality =
  fun (a : ByStr20) =>
  fun (b : ByStr20) =>
    builtin eq a b

(* utility to remove all elements that equal a value from a list *)
(*Thanks to DrBee https://github.com/TheDrBee/oSCILLAtor/blob/main/contracts/List.scilla*)
let equal = fun (a: ByStr20) => fun(b: ByStr20) =>
  builtin eq a b
let not_equal = fun (a: ByStr20) => fun(b: ByStr20) =>
  let equal = builtin eq a b in
  negb equal (* from BoolUtils *)
  
let remove_elements_from_list = fun(value: ByStr20) => fun(l: List ByStr20) =>
  let f = not_equal value in
  let filterByStr20 = @list_filter ByStr20 in (* from ListUtils *)
  filterByStr20 f l
  
  
type Error =
| NonOwnerCannotCall
| ContractNotPaused
| ContractPaused
| ContractNotApproved
| ContractNotFound


(* Error events *)
let mk_error_event =
  fun (err : Error) =>
  let err_code = 
    match err with
    | NonOwnerCannotCall        => Int32 -1
    | ContractNotPaused         => Int32 -2
    | ContractPaused            => Int32 -3
    | ContractNotApproved       => Int32 -4
    | ContractNotFound          => Int32 -5
    end in
    { _exception : "Error"; code : err_code }


let false = False
let true = True
let zero = Uint128 0
let one = Uint128 1
let huge_zero = Uint256 0
let empty_list = Nil {ByStr20}

(***************************************************)
(*             The contract definition             *)
(*                                                 *)
(* This contract tracks the official offset        *)
(* progress within the Zilliqa voluntary offsetting*)
(* scheme across any number of approved schemes    *)
(*                                                 *)
(* WARNING: If the owner loses their private key   *)
(* they will be unable to interact with the smart  *)
(* contract, for this reason a recovery wallet may *)
(* be desirable to set in order to prevent losses. *)
(*                                                 *)
(***************************************************)
contract Tally
(
init_owner           : ByStr20,
init_contract   : ByStr20
)

(*               Field Definitions              *)
field owner: ByStr20 = init_owner
field paused : Bool = false
field pending_owner : Option ByStr20 = None {ByStr20}
field approved_contracts: List ByStr20 = Cons {ByStr20} init_contract empty_list
field grams_offset: Uint256 = huge_zero

(*                Begin Procedures              *)

procedure ThrowError (err : Error)
  e = mk_error_event err;
  throw e
end

procedure IsOwner()
  wallet <- owner;
  is_wallet_owner = builtin eq wallet _sender;
  match is_wallet_owner with
  | True => 
  | False =>
    err = NonOwnerCannotCall;
    ThrowError err
  end
end

procedure IsPaused()
  pause_status <- paused;
  match pause_status with
  | False => 
    err = ContractNotPaused;
    ThrowError err
  | True =>
  end
end

procedure IsNotPaused()
  pause_status <- paused;
  match pause_status with
  | True => 
    err = ContractPaused;
    ThrowError err
  | False =>
  end
end

procedure SenderIsAllowedContract()
  list_mem_addr = @list_mem ByStr20;
  approved_list <- approved_contracts;
  approved = list_mem_addr equality _sender approved_list;
  match approved with
    | True => 
    | False =>
      err = ContractNotApproved;
      ThrowError err
  end
end



(*                    Begin Transitions                       *)

transition ContributeGrams(offset: Uint256)
  SenderIsAllowedContract;
  current_tally <- grams_offset;
  new_total = builtin add current_tally offset;
  grams_offset := new_total
end

transition AddOffsetContract(address: ByStr20)
  IsOwner;
  added_approved_contracts = Cons {ByStr20} address empty_list;
  old_list <- approved_contracts;
  combine = @list_append ByStr20;
  new_list = combine added_approved_contracts old_list;
  approved_contracts := new_list
  (*TODO: Trigger EnrollmentSuccessCallBack(from: ByStr20, contract_addr: ByStr20) callbakc*)
end

transition RemoveOffsetContract(address: ByStr20)
  IsOwner;
  old_list <- approved_contracts;
  list_without_values = remove_elements_from_list address old_list;
  approved_contracts := list_without_values
end

transition Pause()
  IsNotPaused;
  IsOwner;
    paused := true;
    e = { _eventname : "Contract Paused" };
    event e
end

transition Resume()
  IsPaused;
  IsOwner;
    paused := false;
    e = { _eventname : "Contract Unpaused" };
    event e
end


(*      SAFE OWNERSHIP TRANSFER TRANSITIONS   *)

transition RequestOwnershipTransfer(new_owner: ByStr20)
  IsOwner;
  po = Some {ByStr20} new_owner;
  pending_owner := po
end

transition ConfirmOwnershipTransfer()
  optional_po <- pending_owner;
  match optional_po with
  | Some pend_owner =>
      caller_is_new_owner = builtin eq _sender pend_owner;
      match caller_is_new_owner with
      | True =>
          (* transfer ownership *)
          owner := pend_owner;
          none = None {ByStr20};
          pending_owner := none
      | False => (* the caller is not the new owner, do nothing *)
      end
  | None => (* ownership transfer is not in-progress, do nothing *)
  end
end

(* Compatible contracts must include these callbacks:*)
(*transition  EnrollmentSuccessCallBack(contract_addr: ByStr20)*)
(*transition  OffsetSuccessCallBack(grams: Uint256)*)
